### overview of DB#################################################

data problem；
  1. data embedded into APP, cannot stored separately
  2. access depending on the administrator.

file based data disadvantage:
  1. lack of separation and isolation
  2. duplicating needs too much space
  3. multi parts require multi access
  4.incompatible formats
  5. satisfy specific request 
 
DBMS hanle request from APP to use data
  1. reduce complexity
  2. provide a level of security
  3. provide customiize the appearance
  4. unchanging structure
  
 DB:1.logically related data; 2. system catalog
 DBMS: to operate on DB
 redundancy represents relationship between two objects in DB
 
 use DB
  1. control of data redundancy
  2. data consistency
  3. more information from data
  4. share data
  5. improve integrity
  6. improve security
  7. enforcement of standards
  8. economy of scale
  9.balance conflicting requirement
  10. improved data accessibility
  11. increase productivity
  12. improve maintenance through data independence
  13. increase concurrency
  14. improve backup
 
cons
  1.complexity 2. size 3. cost 4. hardware cost
  5. converting data to DB   6. performance degrade for time increase
  7. higher impact of a failure
  
 role of DB user
  1. data administrator
  2. DB administrator
  3. DB designer
  4. programmer
  5. end users

### overview of DB architecture ####################################

hardware architecture 80s-90s download file before use data
clien-server architecture (default architecture to duilb modern DB)
  client                            server
  manage the user interface         accept DB
  accept & check syntax of input    check authorization
  process logic                     ensure integrity
  generate DB request to server     transmit response to client
  pass response to user             naintain system catalog
  
 too many tiers: 1. require considerable resources  2. VIP overhead
 
 1 tier client -> 2tier application server -> 3tier DB server
 
 thin client pros: 1. economical hardware  2. APP maintenance centralized   3. beter separation
 
 Transaction Processing Monitor : brain of connect server and client
 
 funneling - switch of TPM
 
### Three-level architecture ################################################################
The objectives of the three-level architecture is to separate the user's view,

  It allows independent customized user views: Each user should be able to access the same data, but have a different customized view of the data. These should be independent: changes to one view should not affect others.
  It hides the physical storage details from users: Users should not have to deal with physical database storage details.
  The database administrator should be able to change the database storage structures without affecting the users’ views.
 The internal structure of the database should be unaffected by changes to the physical aspects of the storage: For example, a changeover to a new disk.
  
  1. External Level (User Views)
  2. Conceptual Level: The conceptual level is a way of describing what data is stored within the whole database and how the data is inter-related. The conceptual level does not specify how the data is physically stored. Some important facts about this level are:
    *DBA works at this level.
    *Describes the structure of all users.
    *Only DBA can define this level.
    *Global view of database.
    *Independent of hardware and software.
  3. Internal Level: The internal level involves how the database is physically represented on the computer system. It describes how the data is actually stored in the database and on the computer hardware.

Three data schema
  1. The external schemas describe the different external views of the data and there may be many external schemas for a given database.
  2. The conceptual schema describes all the data items and relationships between them, together with integrity constraints (later). There is only one conceptual schema per database.
  3. The internal schema at the lowest level contains definitions of the stored records, the methods of representation, the data fields, and indexes. There is only one internal schema per database.


### Structure ###############################

conceptual: entities, relationships
logical: entities, relationships. attributes
physial: entities, relationships, attributes, data types.

Chen: entities are rectangles, attributes are ovals, relationships are lines with diamonds, cardinalities are numbers, cardinalities are symbols on lines.
Crow's foot: entities are rectangles, attributes are text in rectangles, relationships are lines, cardinalities are symbols on lines.

Subclass( has one or more following properties)
  non-key attribute >= 1
  additional relationship with another entity that is logically correct for it and none other >= 1
  operation that is only applicable to it >= 1
  
### relational model ######################################

Generally databases are based on one of the three models: the hierarchical model(non-relational model), the network model(non-relational model) or the relational model. relational model is simple--uses the values of the records instead of pointers to relate the records

The relational model mathematics, set theory and predicate logic

three components: structural component (or data structures), manipulative component (or data manipulation), and integrity constraints.

Structural component: entity types and their relationships.
Manipulative component: a set of operations that are performed on a table or group of tables. 
Integrity constraints: a set of rules that governs the entity types and their relationships, and thereby, ensures the integrity of database.

A relation comprises of a relation schema and a relation instance. A relation schema (also termed as relation intension) depicts the attributes of the table, and a relation instance (also termed as relation extension) is a two-dimensional table with a time-varying set of tuples.
